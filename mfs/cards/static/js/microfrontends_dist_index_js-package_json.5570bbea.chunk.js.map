{"version":3,"file":"static/js/microfrontends_dist_index_js-package_json.5570bbea.chunk.js","mappings":"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","sources":["../../microfrontends/src/index.ts","../../node_modules/.pnpm/tiny-invariant@1.3.1/node_modules/tiny-invariant/dist/esm/tiny-invariant.js","../../microfrontends/src/common/utils/assert.utils.ts","../../microfrontends/src/common/utils/errors.utils.ts","../../microfrontends/src/common/utils/sleep.utils.ts","../../microfrontends/src/common/utils/route.utils.ts","../../microfrontends/src/common/register/index.ts","../../microfrontends/src/components/ErrorBoundary/index.tsx","../../microfrontends/src/components/Microfrontend/index.tsx","../../microfrontends/src/components/Microfrontend/Microfrontend.service.ts","../../microfrontends/src/components/MicrofrontendSlot/index.tsx","../../microfrontends/src/contexts/index.tsx","../../microfrontends/src/components/MicrofrontendSlot/MicrofrontendSlot.utils.ts","../../microfrontends/src/components/MicrofrontendScreen/index.tsx","../../microfrontends/src/components/MicrofrontendScreen/MicrofrontendScreen.utils.ts"],"sourcesContent":["export * from \"./common\";\nexport * from \"./components\";\nexport * from \"./contexts\";\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","import invariant from \"tiny-invariant\";\n\n/**\n * Asserts that the given condition is truthy, otherwise throws an error.\n */\nexport const assert = <TOptional>(\n  condition: TOptional,\n  message: string | (() => string)\n): NonNullable<TOptional> => {\n  invariant(\n    condition,\n    typeof message === \"string\"\n      ? `AssertError: ${message}`\n      : message || `AssertError: condition must be truthy`\n  );\n  const _condition = condition;\n  return _condition;\n};\n","/**\n *\n * Creates an error object with a name and a message.\n */\nexport const makeError = <TName extends string>(\n  name: TName,\n  message: string,\n  cause?: unknown\n) => ({\n  name,\n  message,\n  stack: new Error().stack,\n  cause,\n  toString: () => `${name}: ${message}`,\n});\n\n/**\n * Throws an error with the given name and message.\n */\nexport const throwError = <TName extends string>(\n  name: TName,\n  message: string\n) => {\n  throw makeError(name, message);\n};\n","export const sleep = (ms: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n};\n","import { pathToRegexp } from \"path-to-regexp\";\n\n/**\n * Whether the given route can match the other route\n */\nexport const canMatchRoute = (route1: string, route2: string): boolean => {\n  const route1Regex = pathToRegexp(route1.replace(/\\/\\*+/g, \"/:params*\"), []);\n  const route2Regex = pathToRegexp(route2.replace(/\\/\\*+/g, \"/:params*\"), []);\n  return route1Regex.test(route2) || route2Regex.test(route1);\n};\n\n/**\n * Whether the given permission can match the other permission\n */\nexport const canMatchPermission = (\n  permission1: string,\n  permission2: string\n): boolean => {\n  const route1Regex = pathToRegexp(\n    permission1.replace(/\\/\\*\\*+/g, \"/:params*\").replace(/\\/\\*/g, \"/:params\"),\n    []\n  );\n  const route2Regex = pathToRegexp(\n    permission2.replace(/\\/\\*\\*+/g, \"/:params*\").replace(/\\/\\*/g, \"/:params\"),\n    []\n  );\n  return route1Regex.test(permission2) || route2Regex.test(permission1);\n};\n\n/**\n * Whether the given host can match the other host\n */\nexport const canMatchHost = (hostA?: string, hostB?: string): boolean => {\n  return !hostA || !hostB || hostA === hostB;\n};\n\ntype Permission = `${\"manage\" | \"read-only\"}:${string}`;\n\n/**\n * Whether the given user can match the given permissions\n */\nexport const canMatchPermissions = (\n  user: {\n    permissions: Permission[];\n  },\n  permissions: Permission[]\n): boolean => {\n  return permissions?.every((permission) => {\n    const [action, ...objectPaths] = permission.split(\":\");\n    const objectPath = objectPaths.join(\":\");\n    return user.permissions.some((p) => {\n      const [uAction, ...uObjectPaths] = p.split(\":\");\n      const uObjectPath = uObjectPaths.join(\":\");\n      const objectPathsMatching =\n        uObjectPath === objectPath ||\n        canMatchPermission(uObjectPath, objectPath);\n      const actionsMatching =\n        uAction === action || (action === \"read-only\" && uAction === \"manage\");\n      return objectPathsMatching && actionsMatching;\n    });\n  });\n};\n\nexport const selectProps =\n  <TKeys extends readonly string[]>(keys: TKeys) =>\n  <TObj extends { [key in TKeys[number]]: any }>(\n    obj: TObj\n  ): {\n    [key in TKeys[number]]: TObj extends Record<key, infer TValue>\n      ? TValue\n      : never;\n  } => {\n    return Object.fromEntries(\n      Object.entries(obj).filter(([key]: [any, any]) => keys.includes(key))\n    ) as Record<TKeys[number], any>;\n  };\n","import { z, ZodType } from \"zod\";\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\n\nimport { assert, sleep } from \"../utils\";\nimport {\n  MicrofrontendController,\n  MountFn,\n  UnmountFn,\n} from \"../../components/Microfrontend/Microfrontend.types\";\n\ntype Prettify<T> = { [K in keyof T]: T[K] } & {};\n\nconst getWindow = () => {\n  const $window: Partial<Window> & { [key: string]: any } =\n    typeof window === \"undefined\" ? {} : window;\n  return $window;\n};\n\n/**\n *\n * @param {string} scope\n * @param {{ hasZeroInstances: () => boolean }} tracker\n */\nconst unloadMicrofrontendAssets = (\n  scope: string,\n  tracker: { hasZeroInstances: () => boolean }\n) => {\n  const mfName = `mf-${scope.toLocaleLowerCase()}-entry`;\n  const mfScript = document.getElementById(mfName);\n  if (!mfScript) {\n    return;\n  }\n  const src = assert(\n    mfScript.getAttribute(\"src\"),\n    `script #${mfName} must have attr [src]`\n  );\n  const lastSlash = src.lastIndexOf(\"/\");\n  const urlStart = src.slice(0, lastSlash);\n\n  const maxAttempts = 3;\n\n  async function attemptToRemoveAssets(attempt = 0): Promise<Element[]> {\n    const scripts = Array.from(document.querySelectorAll(\"head script\")).filter(\n      (script) => script.getAttribute(\"src\")?.startsWith(urlStart)\n    );\n    const links = Array.from(document.querySelectorAll(\"head link\")).filter(\n      (link) => link.getAttribute(\"href\")?.startsWith(urlStart)\n    );\n\n    if (links.length && tracker.hasZeroInstances()) {\n      console.log(\"Removed assets\", [...scripts, ...links]);\n      scripts.forEach((script) => {\n        script.remove();\n      });\n      links.forEach((link) => {\n        link.remove();\n      });\n      return [...scripts, ...links];\n    } else {\n      return sleep(100).then(() => {\n        if (attempt < maxAttempts) {\n          return attemptToRemoveAssets(attempt + 1);\n        }\n        return [];\n      });\n    }\n  }\n  return sleep(100).then(() => attemptToRemoveAssets());\n};\n\n/**\n * Keeps track of how many running instances of a Microfrontend there are.\n *\n * By tracking, we are able to unload the Microfrontend's assets when there are no more instances running.\n */\nconst instanceTracker = ($ctrl: MicrofrontendController) => {\n  return {\n    increment: () => {\n      $ctrl.instances++;\n    },\n    decrement: () => {\n      if ($ctrl.instances > 0) {\n        $ctrl.instances--;\n      }\n    },\n    hasZeroInstances: () => {\n      const $window = getWindow();\n      const scope = $window.$mfs?.[$ctrl.scope] as {\n        [key: string]: { instances: number };\n      };\n      return (\n        Object.values(\n          assert(scope, `window.$mfs.${$ctrl.scope} must exist`)\n        ).reduce((sum, scope) => sum + scope.instances, 0) === 0\n      );\n    },\n  };\n};\n\n/**\n * The Microfrontend Controller is the engine room for a Microfrontend.\n * It contains the `mount` and `unmount` functions, as well as other variables for managing the microfrontend.\n *\n * Usually, a Microfrontend's controller is located in `window.$mfs[scope][module]`\n *\n * If no controller exists for the scope<>module pair, then a new placeholder controller will be created in the appropriate location\n *\n */\nconst getMicrofrontendController = <\n  TScope extends string,\n  TModule extends string\n>(\n  scope: TScope,\n  module: TModule\n): MicrofrontendController<TScope, TModule> => {\n  if (typeof window === \"undefined\") {\n    console.warn(\n      \"Microfrontend cannot be registered without a global window scope\"\n    );\n  }\n  const $window = getWindow();\n  $window.$mfs = $window.$mfs || {};\n  $window.$mfs[scope] = $window.$mfs[scope] || {};\n  const $scope = $window.$mfs[scope];\n  if ($scope) {\n    $scope[module] = $scope[module] || {\n      mount: () => {\n        console.warn(`No ${scope} mount fn exists`);\n        return () => {};\n      },\n      unmount: () => console.warn(`No ${scope} unmount fn exists`),\n      instances: 0,\n      scope,\n      module,\n      props: {},\n    };\n    return $scope?.[module]! as MicrofrontendController<TScope, TModule>;\n  }\n  console.warn(`No ${scope} scope exists in window.$mfs`);\n  return $scope?.[module]!;\n};\n\n/**\n * Registers a microfrontend's scope and module in the window, returning a controller\n */\nexport const register = <\n  TMountPropsSchema extends ZodType<{}>,\n  TMountProps extends TMountPropsSchema extends ZodType<infer Props>\n    ? Props\n    : never,\n  TScope extends string = string,\n  TModule extends string = string\n>(\n  scope: TScope,\n  module: TModule,\n  {\n    mount,\n    unmount,\n    props,\n  }: {\n    mount: MountFn<TMountProps>;\n    unmount: UnmountFn;\n    props: TMountPropsSchema;\n  }\n): Prettify<MicrofrontendController<TScope, TModule, TMountProps>> => {\n  const $ctrl = getMicrofrontendController(scope, module);\n  $ctrl.props = jsonSchemaOf(props);\n  $ctrl.tracker = $ctrl.tracker || instanceTracker($ctrl);\n  const runUnmountFn = (unmount: () => () => void) => {\n    $ctrl.tracker?.decrement();\n    if ($ctrl.tracker?.hasZeroInstances()) {\n      unloadMicrofrontendAssets(scope, $ctrl.tracker);\n    }\n    return () => {\n      setTimeout(() => {\n        unmount()();\n      });\n    };\n  };\n  const getHTMLElement = (ref: HTMLElement | string) =>\n    ref instanceof HTMLElement ? ref : document.getElementById(ref);\n  $ctrl.mount = (containerRef, props) => {\n    $ctrl.tracker?.increment();\n    const unmount = assert(mount, \"mount fn must exist\")(\n      containerRef,\n      props as any\n    );\n    const container = getHTMLElement(containerRef);\n    const eventBus = props?.eventBus;\n    console.log(`%c [eventBus] emit mount - mf-scope: ${scope} - (mf-module: ${module})`, 'background: green; color: #ffffff')\n    eventBus?.emit(\"mf:mount\", {\n      container,\n      scope,\n      module,\n    });\n    return () => {\n      console.log(`%c [eventBus] emit unmount - mf-scope: ${scope} - (mf-module: ${module})`, 'background: orange; color: #ffffff')\n      eventBus?.emit(\"mf:unmount\", {\n        container,\n        scope,\n        module,\n      });\n      return runUnmountFn(unmount);\n    };\n  };\n  $ctrl.unmount = (containerRef) => {\n    return runUnmountFn(() =>\n      assert(unmount, \"unmount fn must exist\")(containerRef)\n    );\n  };\n  return $ctrl;\n};\n\nexport const jsonSchemaOf = <TSchema extends {}>(schema: ZodType<TSchema>) =>\n  zodToJsonSchema(schema, \"props\") as TSchema;\n\nexport { z };\n","import React, { Component } from \"react\";\nimport { MicrofrontendErrorFallback } from \"./ErrorBoundary.types\";\n\ntype ErrorBoundaryState<TError> = {\n  error: TError | null;\n  errorInfo: any;\n};\n\ntype ErrorBoundaryProps<TProps, TError> = {\n  children: React.ReactNode;\n  Fallback: MicrofrontendErrorFallback<TProps, TError>;\n};\n\nexport class ErrorBoundary<\n  TError extends { message: string; cause?: any }\n> extends Component<\n  ErrorBoundaryProps<{}, TError>,\n  ErrorBoundaryState<TError>\n> {\n  constructor(props: ErrorBoundaryProps<{}, TError>) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error: Error & TError, errorInfo: any) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error,\n      errorInfo: errorInfo,\n    });\n    // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    if (this.state.errorInfo && this.state.error) {\n      const error = this.state.error;\n      const cause = this.state.errorInfo;\n      if (error) {\n        error.cause = cause;\n      }\n      const Fallback = this.props.Fallback;\n      // Error path\n      return typeof Fallback === \"function\" ? (\n        <Fallback error={error} />\n      ) : (\n        Fallback\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n","import classNames from \"classnames/dedupe\";\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\n\nimport { makeError, assert } from \"../../common\";\nimport { loadMicrofrontend } from \"./Microfrontend.service\";\nimport { MicrofrontendErrorFallback } from \"../ErrorBoundary/ErrorBoundary.types\";\nimport { MicrofrontendManifest } from \"./Microfrontend.types\";\nimport { ErrorBoundary } from \"../ErrorBoundary\";\n\ntype MicrofrontendProps = {\n  scope: string;\n  module: string;\n  entry: string;\n  manifests: MicrofrontendManifest[];\n  url?: string;\n  id?: string;\n  className?: string | string[] | { [key: string]: boolean };\n  navigate?: (href: string) => any;\n  Loading: React.ComponentType;\n  Fallback: MicrofrontendErrorFallback;\n  loadMicrofrontend?: typeof loadMicrofrontend;\n};\n\nexport const Microfrontend = ({\n  id,\n  scope,\n  entry,\n  module,\n  Loading,\n  Fallback,\n  className,\n  loadMicrofrontend,\n  ...props\n}: MicrofrontendProps) => {\n  const {\n    isFetched: isMounted,\n    isError,\n    error,\n    data: { mount } = {},\n  } = useQuery(`microfrontend?entry=${entry}&module=${module}`, async () => {\n    console.log(`1.[Query]: microfrontend?entry=${entry}&module=${module}`)\n    assert(loadMicrofrontend, \"props.loadMicrofrontend must be a function\");\n    return loadMicrofrontend?.({ entry, scope, module });\n  });\n\n  const mfClassName = classNames(\n    \"microfrontend-container spin-when-empty\",\n    className\n  );\n\n  const containerId = `mount-${(id || scope).toLowerCase()}-container`;\n  const [mfError, setMFError] = useState<{ message: string } | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n\n  const ErrorFallback: MicrofrontendErrorFallback = (errorProps) =>\n    typeof Fallback === \"function\" ? (\n      <Fallback\n        {...{\n          containerId,\n          scope,\n          entry,\n          module,\n          ...props,\n        }}\n        {...errorProps}\n        retry={() => setRetryCount(retryCount + 1)}\n      />\n    ) : (\n      Fallback\n    );\n\n  const _ErrorBoundary = ({ children }: { children: React.ReactElement }) => (\n    <ErrorBoundary Fallback={ErrorFallback}>{children}</ErrorBoundary>\n  );\n\n  useEffect(() => {\n    if (!isMounted || isError || typeof mount !== \"function\") {\n      return;\n    }\n    let unmount: (() => void) | null = null;\n    try {\n      unmount = mount(containerId, {\n        ...props,\n        ErrorBoundary: _ErrorBoundary,\n      });\n    } catch (error) {\n      setMFError(\n        makeError(\n          \"MountError\",\n          `Could not mount Microfrontend: ${scope} (${module})`,\n          error\n        )\n      );\n    }\n    return () => {\n      setTimeout(() => {\n        try {\n          if (typeof unmount === \"function\") {\n            console.log(`%c unmount: mf-scope: ${scope} - (mf-module: ${module})`, 'background: purple; color: #ffffff');\n            unmount();\n          }\n        } catch (err) {\n          console.error(err);\n          setMFError(\n            makeError(\n              \"UnmountError\",\n              `Could not unmount Microfrontend: ${scope} (${module})`,\n              error\n            )\n          );\n        }\n      });\n    };\n  }, [isMounted, isError, entry, module, retryCount]);\n\n  return isError ? (\n    <ErrorFallback\n      error={\n        error instanceof Error\n          ? error\n          : makeError(\n              \"UnknownError\",\n              typeof error === \"string\"\n                ? error\n                : `An error occurred in a microfrontend: ${error}`,\n              error\n            )\n      }\n    />\n  ) : mfError ? (\n    <ErrorFallback error={mfError} />\n  ) : !isMounted ? (\n    typeof Loading === \"function\" ? (\n      <Loading />\n    ) : (\n      Loading\n    )\n  ) : (\n    <div\n      id={containerId}\n      className={mfClassName}\n      {...{ \"data-mf-scope\": scope, \"data-mf-module\": module }}\n    ></div>\n  );\n};\n\nMicrofrontend.defaultProps = {\n  loadMicrofrontend,\n};\n\nexport * from \"./Microfrontend.types\";\n","import { assert, sleep } from \"../../common\";\nimport {\n  MicrofrontendManifest,\n  MicrofrontendDefaultExport,\n} from \"./Microfrontend.types\";\n\ndeclare function __webpack_init_sharing__(scope: string): Promise<void>;\ndeclare const __webpack_share_scopes__: { default: any };\n\nexport function loadComponent<TScope extends string>(\n  scope: TScope,\n  module: string\n): () => Promise<MicrofrontendDefaultExport> {\n  return async () => {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    const $window = window as {\n      [key in TScope]: {\n        init: (webpackShareScope: any) => Promise<any>;\n        get: (module: string) => Promise<{ [key: string]: any }>;\n      };\n    };\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__(\"default\");\n\n    const container = $window[scope];\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await Promise.race([\n      container?.get(module),\n      sleep(300).then(() =>\n        Promise.reject(\n          new Error(\n            `No module ${module} was found in window.${scope} container`\n          )\n        )\n      ),\n    ]);\n    const Module =\n      typeof factory === \"function\"\n        ? factory()\n        : Promise.reject(\n            new Error(\n              `No module ${module} was found in window.${scope} container`\n            )\n          );\n    return Module;\n  };\n}\n\nexport const loadScript = (\n  id: string,\n  src: string\n): Promise<HTMLScriptElement> => {\n  return new Promise((resolve, reject) => {\n    if (document.querySelector(`script[id=\"${id}\"]`)) {\n      const script: HTMLScriptElement = assert(\n        document.querySelector(`script[id=\"${id}\"]`),\n        `script must exist: [id=${id}]`\n      );\n      return resolve(script);\n    }\n    const script = document.createElement(\"script\");\n    script.id = id;\n    script.src = src;\n    script.type = \"text/javascript\";\n    script.async = true;\n    script.onload = () => resolve(script);\n    script.onerror = reject;\n    document.head.appendChild(script);\n  });\n};\n\nexport const loadMicrofrontend = async ({\n  entry,\n  scope,\n  module,\n}: Pick<MicrofrontendManifest, \"entry\" | \"scope\" | \"module\">) =>\n  loadScript(`mf-${scope.toLowerCase()}-entry`, entry)\n    .then(() => loadComponent(scope, module)())\n    .then((exported) => exported.default)\n    .then(({ mount, unmount }) => {\n      return {\n        mount,\n        unmount,\n      };\n    })\n    .catch((error: unknown) => Promise.reject(error));\n","import React, { useContext, useId } from \"react\";\nimport { ErrorBoundary } from \"../ErrorBoundary\";\nimport { MicrofrontendContext } from \"../../contexts\";\nimport { Microfrontend } from \"../Microfrontend\";\nimport { getMicrofrontendsByName } from \"./MicrofrontendSlot.utils\";\nimport { MicrofrontendCustomSlotOptions } from \"../Microfrontend/Microfrontend.types\";\n\ntype MicrofrontendSlot = MicrofrontendCustomSlotOptions & {\n  [key: string]: any;\n};\n\ntype MicrofrontendSlotProps = {\n  name: string;\n  transform?: (slots: MicrofrontendSlot[]) => MicrofrontendSlot[];\n  Fallback?: React.ComponentType<{ slot?: MicrofrontendSlot }>;\n  Loading?: React.ComponentType<{ slot?: MicrofrontendSlot }>;\n  className?: string | string[] | { [key: string]: boolean };\n};\n\nexport const MicrofrontendSlot = ({\n  name,\n  transform,\n  Fallback,\n  Loading,\n  className,\n  ...props\n}: MicrofrontendSlotProps) => {\n  const id = useId();\n  const { manifests, user, ...contextProps } = useContext(MicrofrontendContext);\n\n  const slots = getMicrofrontendsByName(manifests, name, {\n    user,\n  });\n\n  const transformedSlots = transform?.(slots) || slots;\n\n  return (\n    <>\n      {transformedSlots.map((slot, index) => (\n        <ErrorBoundary\n          key={`slot-${slot.scope}-${slot.module}-${id}-${index}`}\n          Fallback={\n            typeof Fallback === \"function\"\n              ? (errorProps) => (\n                  <Fallback slot={slot} {...props} {...errorProps} />\n                )\n              : Fallback || (() => <></>)\n          }\n        >\n          <Microfrontend\n            {...{ manifests, user, ...slot, ...contextProps, ...props }}\n            Fallback={\n              typeof Fallback === \"function\"\n                ? (errorProps) => (\n                    <Fallback slot={slot} {...props} {...errorProps} />\n                  )\n                : Fallback || (() => <></>)\n            }\n            Loading={\n              typeof Loading === \"function\"\n                ? () => <Loading slot={slot} />\n                : Loading || (() => <></>)\n            }\n            entry={slot.entry}\n            module={slot.module}\n            scope={slot.scope}\n            className={className}\n            id={`slot-${slot.scope}-${id}-${index}`}\n          />\n        </ErrorBoundary>\n      ))}\n    </>\n  );\n};\n\nMicrofrontendSlot.defaultProps = {\n  transform: (slots) => slots,\n  Fallback: () => <div>Sorry, there was an error loading this component</div>,\n  Loading: () => <div>...loading...</div>,\n} satisfies Partial<MicrofrontendSlotProps>;\n\nexport * from \"./MicrofrontendSlot.utils\";\n","import React from \"react\";\n\nimport { ErrorBoundary, MicrofrontendMountProps } from \"../components\";\n\nconst defaults = {\n  homedir: \"/\",\n\n  url: \"/\",\n\n  navigate: () => {},\n\n  manifests: [],\n\n  fetch: (input: RequestInfo, init?: RequestInit) => window.fetch(input, init),\n\n  user: undefined,\n\n  eventBus: undefined,\n\n  layout: {\n    navItems: [],\n    logout: () => {},\n  },\n\n  ErrorBoundary: ({ children }: { children: React.ReactElement }) => (\n    <ErrorBoundary Fallback={() => <>An Error occurred</>}>\n      {children}\n    </ErrorBoundary>\n  ),\n};\n\nexport const MicrofrontendContext =\n  React.createContext<MicrofrontendMountProps>(defaults);\n","import {\n  assert,\n  canMatchHost,\n  canMatchPermissions,\n  selectProps,\n} from \"../../common\";\nimport {\n  MicrofrontendCustomSlotOptions,\n  MicrofrontendManifest,\n  MicrofrontendPermission,\n} from \"../Microfrontend/Microfrontend.types\";\n\ntype MicrofrontendMatchingName = {\n  module: string;\n  entry: string;\n  scope: string;\n  [key: string]: any;\n};\n\n/**\n *\n * @param manifests\n * @param name\n * @param options\n * @param options.transformPermission Use this to replace keywords in permissions such as :companyAccountId or :userId\n * @returns Slots matching the given name\n */\nexport const getMicrofrontendsByName = (\n  manifests: MicrofrontendManifest[],\n  name: string,\n  options?: {\n    host?: string;\n    user?: { permissions: MicrofrontendPermission[] };\n    transformPermission?: (\n      permission: MicrofrontendPermission\n    ) => MicrofrontendPermission;\n  }\n): MicrofrontendMatchingName[] =>\n  manifests\n    ?.reduce(\n      (arr, manifest) =>\n        [\n          ...arr,\n          ...(manifest.slots[name]?.map((slot) => ({\n            ...selectProps([\"entry\", \"scope\", \"module\", \"auth\"])(manifest),\n            ...(typeof slot === \"string\" ? { slot } : slot),\n          })) || []),\n        ] as MicrofrontendMatchingName[],\n      [] as MicrofrontendMatchingName[]\n    )\n    .filter(({ host: routeHost }: MicrofrontendCustomSlotOptions) =>\n      canMatchHost(routeHost, options?.host)\n    )\n    .filter(\n      ({ auth }: MicrofrontendCustomSlotOptions) =>\n        !auth?.required ||\n        canMatchPermissions(\n          assert(options?.user, \"options.user must exist\"),\n          auth?.permissions?.map((p) =>\n            typeof options?.transformPermission === \"function\"\n              ? options?.transformPermission(p)\n              : p\n          ) || []\n        )\n    );\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useLocation } from \"react-router-dom\";\nimport { makeError } from \"../../common\";\n\nimport { Microfrontend } from \"../Microfrontend\";\nimport { getMicrofrontendsMatchingLocation } from \"./MicrofrontendScreen.utils\";\nimport {\n  MicrofrontendManifest,\n  MicrofrontendMountProps,\n} from \"../Microfrontend/Microfrontend.types\";\nimport { MicrofrontendErrorFallback } from \"../ErrorBoundary/ErrorBoundary.types\";\n\ntype MicrofrontendScreenProps = {\n  host?: string;\n  Loading: React.ComponentType;\n  Fallback: MicrofrontendErrorFallback;\n  Microfrontend: typeof Microfrontend;\n} & Omit<MicrofrontendMountProps, \"manifests\" | \"ErrorBoundary\"> &\n  (\n    | {\n        getMicrofrontendManifests: () => Promise<MicrofrontendManifest[]>;\n      }\n    | {\n        manifests: MicrofrontendManifest[];\n      }\n  );\n\n/**\n * Route-level component, that loads Microfrontends based on\n * whether their manifest routes matches the current location.\n */\nexport const MicrofrontendScreen = ({\n  host,\n  Loading,\n  Fallback,\n  navigate,\n  Microfrontend,\n  ...props\n}: MicrofrontendScreenProps) => {\n  const location = useLocation();\n  const url = location.pathname;\n  const {\n    data: manifests = \"manifests\" in props ? props.manifests : [],\n    isLoading,\n    isError,\n    error,\n  } = useQuery(\n    \"manifests\",\n    () =>\n      \"getMicrofrontendManifests\" in props\n        ? props.getMicrofrontendManifests()\n        : props.manifests,\n    {\n      enabled: \"getMicrofrontendManifests\" in props,\n    }\n  );\n  const [targetMF] =\n    getMicrofrontendsMatchingLocation(manifests || [], url, {\n      host,\n      user: props?.user,\n    }) || [];\n\n  const ErrorFallback = (errorProps: { error: any }) =>\n    typeof Fallback === \"function\" ? (\n      <Fallback {...props} {...errorProps} />\n    ) : (\n      Fallback\n    );\n\n  return isError ? (\n    <ErrorFallback\n      error={\n        error instanceof Error\n          ? error\n          : makeError(\n              \"UnknownError\",\n              typeof error === \"string\"\n                ? error\n                : `An error occurred in a microfrontend: ${error}`,\n              error\n            )\n      }\n    />\n  ) : isLoading ? (\n    typeof Loading === \"function\" ? (\n      <Loading />\n    ) : (\n      Loading\n    )\n  ) : !targetMF && manifests?.length ? (\n    <ErrorFallback\n      error={makeError(\n        \"NoRouteMatchFound\",\n        `No microfrontend was found capable of handling the route: ${url}`\n      )}\n    />\n  ) : targetMF ? (\n    <Microfrontend\n      {...props}\n      url={url}\n      entry={targetMF.entry}\n      scope={targetMF.scope}\n      module={targetMF.module}\n      manifests={manifests}\n      navigate={navigate}\n      Loading={Loading}\n      Fallback={Fallback}\n    />\n  ) : null;\n};\n\nMicrofrontendScreen.defaultProps = {\n  Microfrontend,\n};\n\nexport * from \"./MicrofrontendScreen.utils\";\n","import {\n  assert,\n  canMatchHost,\n  canMatchPermissions,\n  canMatchRoute,\n  selectProps,\n} from \"../../common\";\nimport {\n  MicrofrontendManifest,\n  MicrofrontendPermission,\n  MicrofrontendRouteOptions,\n} from \"../Microfrontend/Microfrontend.types\";\n\ntype MicrofrontendMatchingRoute = {\n  entry: string;\n  scope: string;\n  module: string;\n  route: string;\n  host?: string;\n};\n\n/**\n *\n * @param manifests\n * @param url\n * @param options\n * @param options.transformPermission Use this to replace keywords in permissions such as :companyAccountId or :userId\n * @returns slots matching the current location url\n */\nexport const getMicrofrontendsMatchingLocation = (\n  manifests: MicrofrontendManifest[],\n  url: string,\n  options: {\n    host?: string;\n    user?: { permissions: MicrofrontendPermission[] };\n    transformPermission?: (\n      permission: MicrofrontendPermission\n    ) => MicrofrontendPermission;\n  }\n): MicrofrontendMatchingRoute[] =>\n  manifests\n    ?.reduce(\n      (arr, manifest) =>\n        [\n          ...arr,\n          ...(manifest.slots.routes?.map((route) => ({\n            ...selectProps([\"entry\", \"scope\", \"module\", \"auth\"])(manifest),\n            ...(typeof route === \"string\" ? { route } : route),\n          })) || []),\n        ] as MicrofrontendMatchingRoute[],\n      [] as MicrofrontendMatchingRoute[]\n    )\n    .filter(\n      ({ route, host: routeHost }: MicrofrontendRouteOptions) =>\n        canMatchRoute(route, url) && canMatchHost(routeHost, options?.host)\n    )\n    .filter(\n      ({ auth }: MicrofrontendRouteOptions) =>\n        !auth?.required ||\n        canMatchPermissions(\n          assert(options?.user, \"options.user must exist\"),\n          auth?.permissions?.map(\n            typeof options?.transformPermission === \"function\"\n              ? options?.transformPermission\n              : (p) => p\n          ) || []\n        )\n    );\n"],"names":["src_exports","__export","ErrorBoundary","Microfrontend","MicrofrontendContext","MicrofrontendScreen","MicrofrontendSlot","assert","canMatchHost","canMatchPermission","canMatchPermissions","canMatchRoute","getMicrofrontendsByName","getMicrofrontendsMatchingLocation","jsonSchemaOf","makeError","register","selectProps","sleep","throwError","z","import_zod","module","exports","prefix","condition","message","Error","invariant","concat","name","cause","stack","toString","ms","Promise","resolve","setTimeout","import_path_to_regexp","require","route1","route2","route1Regex","pathToRegexp","replace","route2Regex","test","permission1","permission2","hostA","hostB","user","permissions","every","permission","action","objectPaths","split","objectPath","join","some","p","uAction","uObjectPaths","uObjectPath","keys","obj","Object","fromEntries","entries","filter","_ref","key","includes","import_zod_to_json_schema","getWindow","window","unloadMicrofrontendAssets","scope","tracker","mfName","toLocaleLowerCase","mfScript","document","getElementById","src","getAttribute","lastSlash","lastIndexOf","urlStart","slice","async","attemptToRemoveAssets","attempt","arguments","length","undefined","scripts","Array","from","querySelectorAll","script","_script$getAttribute","startsWith","links","link","_link$getAttribute","hasZeroInstances","console","log","forEach","remove","then","module2","_ref2","mount","unmount","props","$ctrl","getMicrofrontendController","warn","$window","$mfs","$scope","instances","increment","decrement","_$window$$mfs","values","reduce","sum","scope2","instanceTracker","runUnmountFn","unmount2","_$ctrl$tracker","_$ctrl$tracker2","containerRef","props2","_$ctrl$tracker3","container","ref","HTMLElement","eventBus","emit","schema","zodToJsonSchema","import_react","__toESM","Component","constructor","super","this","state","error","errorInfo","componentDidCatch","setState","render","Fallback","default","createElement","children","import_dedupe","import_react2","import_react_query","_ref5","id","entry","Loading","className","loadMicrofrontend","loadMicrofrontend2","isFetched","isMounted","isError","data","useQuery","mfClassName","containerId","toLowerCase","mfError","setMFError","useState","retryCount","setRetryCount","ErrorFallback","errorProps","retry","_ErrorBoundary","_ref6","useEffect","error2","err","defaultProps","_ref3","reject","querySelector","script2","type","onload","onerror","head","appendChild","__webpack_init_sharing__","init","__webpack_share_scopes__","factory","race","get","loadComponent","exported","_ref4","catch","loadScript","import_react4","import_react3","defaults","homedir","url","navigate","manifests","fetch","input","layout","navItems","logout","_ref7","Fragment","createContext","options","arr","manifest","_manifest$slots$name","slots","map","slot","_ref8","host","routeHost","_ref9","_auth$permissions","auth","required","transformPermission","_ref10","transform","useId","contextProps","useContext","transformedSlots","index","import_react5","import_react_query2","import_react_router_dom","_manifest$slots$route","routes","route","_ref11","_ref12","_auth$permissions2","_ref13","Microfrontend2","useLocation","pathname","isLoading","getMicrofrontendManifests","enabled","targetMF"],"sourceRoot":""}